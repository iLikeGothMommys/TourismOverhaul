//   Author: iLikeGothMommys
//	Contract: First Contract
CONTRACT_TYPE
{
    name = Tourism_LocalSiteVist1Tourist
    group = Moons
    genericTitle = Ferry one tourist to see one of our mission sites.
    genericDescription = Ferry one tourist to a mission site and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetVessel
	description = One of our tourist agencies has realized that tourists will be willing to pay extra to visit one of our landing sites. They say it has more sightseeing value. In fact, they have a list of tourists right now who are ready to visit @targetVessel
    synopsis = Ferry one tourist to @targetVessel and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
	targetBody = @targetVessel.CelestialBody()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 9.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
	
	
	//TYPE : EARLY GAME REWARDS
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				invertRequirement = true
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = (46000 + Random(0.0, 2000.0))
		}
	}
	//LATE GAME REWARDS
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        title = Generates targetVessel
		hidden = true
        targetVessel = AllVessels().Where(v => v.VesselType() == Flag || v.VesselType() == Base || v.VesselType() == Probe || v.VesselType() == Lander).Where(v => HomeWorld().Children().Contains(v.CelestialBody()) && v.IsLanded()).Random()
    }
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(1d, 4d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Visit @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 1
			title = touristCount generator
			hidden = true
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @targetBody != HomeWorld()
			title = Must not be homeworld
			hidden = true
		}
}



//CONTRACT: TWO TOURIST CONTRACT
CONTRACT_TYPE
{
    name = Tourism_LocalSiteVist2Tourist
    group = Moons
    genericTitle = Ferry two tourists to see one of our mission sites.
    genericDescription = Ferry two tourists to a mission site and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetVessel
    description = One of our tourist agencies has realized that tourists will be willing to pay extra to visit one of our landing sites. They say it has more sightseeing value. In fact, they have a list of tourists right now who are ready to visit @targetVessel
    synopsis = Ferry two tourists to @targetVessel and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
	targetBody = @targetVessel.CelestialBody()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 9.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
	
	//TYPE: EARLY GAME REWARDS
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				invertRequirement = true
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
	//first tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	}
	
	
		//TYPE: LATE GAME REWARDS
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
	//first tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	}
	
	DATA
    {
        type = Vessel
        uniquenessCheck = CONTRACT_ACTIVE
        title = Generates targetVessel
		hidden = true
        targetVessel = AllVessels().Where(v => v.VesselType() == Flag || v.VesselType() == Base || v.VesselType() == Probe || v.VesselType() == Lander).Where(v => HomeWorld().Children().Contains(v.CelestialBody()) && v.IsLanded()).Random()
    }
	
	DATA
	{
		type = string
		title = getTargetBodyasString
		
		targetBodyString = @/targetBody
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
		DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(1d, 4d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Visit @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 2
			title = touristCount generator
			hidden = true
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @targetBody != HomeWorld()
			title = Must not be homeworld
			hidden = true
		}
}


//CONTRACT: THREE TOURIST CONTRACT
CONTRACT_TYPE
{
    name = Tourism_LocalSiteVist3Tourist
    group = Moons
    genericTitle = Ferry three tourists to see one of our mission sites.
    genericDescription = Ferry three tourists to a mission site and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetVessel
    description = One of our tourist agencies has realized that tourists will be willing to pay extra to visit one of our landing sites. They say it has more sightseeing value. In fact, they have a list of tourists right now who are ready to visit @targetVessel
    synopsis = Ferry three tourists to @targetVessel and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
	targetBody = @targetVessel.CelestialBody()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 9.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
	
	//first tourist
	//type: early game rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				invertRequirement = true
				targetBody = Sun()
				checkType = MANNED
			}
		}
		
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	//third tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName3
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	}
	
	//type: late game rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				targetBody = Sun()
				checkType = MANNED
			}
		}
		
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	//third tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName3
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	}
	
	DATA
    {
        type = Vessel
        uniquenessCheck = CONTRACT_ACTIVE
        title = Generates targetVessel
		hidden = true
        targetVessel = AllVessels().Where(v => v.VesselType() == Flag || v.VesselType() == Base || v.VesselType() == Probe || v.VesselType() == Lander).Where(v => HomeWorld().Children().Contains(v.CelestialBody()) && v.IsLanded()).Random()
    }
	
	DATA
	{
		type = string
		title = getTargetBodyasString
		
		targetBodyString = @/targetBody
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName3 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(1d, 4d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }
	BEHAVIOUR
    {
        name = SpawnPassengers3
        type = SpawnPassengers
		kerbal = @/randomKerbalName3
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Visit @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 3
			title = touristCount generator
			hidden = true
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @targetBody != HomeWorld()
			title = Must not be homeworld
			hidden = true
		}
}


//CONTRACT: FOUR TOURIST CONTRACT
CONTRACT_TYPE
{
    name = Tourism_LocalSiteVist4Tourist
    group = Moons
    genericTitle = Ferry four tourists to see one of our mission sites.
    genericDescription = Ferry four tourists to a mission site and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetVessel
    description = One of our tourist agencies has realized that tourists will be willing to pay extra to visit one of our landing sites. They say it has more sightseeing value. In fact, they have a list of tourists right now who are ready to visit @targetVessel
    synopsis = Ferry four tourists to @targetVessel and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
	targetBody = @targetVessel.CelestialBody()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 9.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
	
	
	//type: early game rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				invertRequirement = true
				targetBody = Sun()
				checkType = MANNED
			}
		}
	//first tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	//third tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName3
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	
	//fourth tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName4's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers4
				type = HasPassengers
				kerbal = @/randomKerbalName4
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName4
			completeInSequence = true
			rewardFunds = (46000 + Random(0000.0, 2000.0))
		}
	}
	}
	
		//type: late game rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				targetBody = Sun()
				checkType = MANNED
			}
		}
	//first tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	
	//second tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	//third tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/targetVessel
				hideChildren = true
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName3
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	
	//fourth tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName4's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Land within 400m of @/targetVessel
			PARAMETER
			{
				name = HasPassengers4
				type = HasPassengers
				kerbal = @/randomKerbalName4
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = true
				vessel = @/targetVessel
				hidden = true
				distance = 400
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName4
			completeInSequence = true
			rewardFunds = (28000 + Random(1000.0, 2000.0))
		}
	}
	}
	
	DATA
    {
        type = Vessel
        uniquenessCheck = CONTRACT_ACTIVE
        title = Generates targetVessel
		hidden = true
        targetVessel = AllVessels().Where(v => v.VesselType() == Flag || v.VesselType() == Base || v.VesselType() == Probe || v.VesselType() == Lander).Where(v => HomeWorld().Children().Contains(v.CelestialBody()) && v.IsLanded()).Random()
    }
	
	DATA
	{
		type = string
		title = getTargetBodyasString
		
		targetBodyString = @/targetBody
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName3 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName4 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(1d, 4d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }
	BEHAVIOUR
    {
        name = SpawnPassengers3
        type = SpawnPassengers
		kerbal = @/randomKerbalName3
    }
	BEHAVIOUR
    {
        name = SpawnPassengers4
        type = SpawnPassengers
		kerbal = @/randomKerbalName4
    }


    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Visit @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 4
			title = touristCount generator
			hidden = true
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @targetBody != HomeWorld()
			title = Must not be homeworld
			hidden = true
		}
}