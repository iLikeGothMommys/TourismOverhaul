//   Author: iLikeGothMommys

CONTRACT_TYPE
{
    name = Attraction
    group = Hotels

    sortKey = 10.00.Attraction
    genericTitle = Shuttle a group of tourists to one of our hotels.
    genericDescription = Once we've built a hotel we can bring tourists there.
    title = Bring @/touristCount.Print() tourists to @targetVessel
    description = Our hotel around @rewardBody is HOT. Loads of tourists want to visit it. Lets ferry a group of tourists to @targetVessel.
    synopsis = Bring @/touristCount.Print() tourists to @targetVessel
    completedMessage = The @TourismOverhaul:tourists have arrived home. They really enjoyed their vacation.
	maxSimultaneous = 1
	prestige = Exceptional
    
	// Quickly Expire
	minExpiry = 6.0
	maxExpiry = 25.0

    // Contract rewards
	rewardFunds = @rewardMultiplier * (28000 * @touristCount)) + Random(0.0, 30000.0)
    rewardReputation = Random(5.0, 8.0)
    failureReputation = 10.0
	
	deadline = Random(9372, 12780)

    DATA
    {
        type = List<VesselIdentifier>

        requiredValue = false

        validHotels = $Attraction_Hotels.Where(vi => Vessel(vi).IsOrbiting())        
    }

    DATA
    {
        type = int

        selectionIndex = Random(0, @validHotels.Count())
        touristCount = Random(10, 35)
    }

    DATA
    {
        type = bool
        
        isHotel = @selectionIndex < @validHotels.Count()
    }
	
	

    DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true // Hidden because the expression requirement conveys the same information

        // Get the proper target vessel
        targetVessel = @validHotels.ElementAt(@selectionIndex)
    }
	
	DATA
	{
		type = CelestialBody
		title = Gives the planet for the modifier.
		hidden = true
		rewardBody = @targetVessel.CelestialBody()
		
	}
	
	DATA
	{
		type = double
		title = Gives the reward modifier.
		hidden = true
		rewardMultiplier = @rewardBody.Multiplier()
	}
    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        vessel = @/targetVessel
		duration = Random(14d, 31d)

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @/touristCount

        removePassengers = true
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristAttractionCount = TouristAttractionCount + @TourismOverhaul:touristCount
        }
    }
	REQUIREMENT
	{
	name = All
    type = All
    REQUIREMENT
    {
        type = Expression

        expression = @/validHotels.Count() > 0

        title = Must have constructed atleast 1 hotel in orbit of a celestial body.
    }
	REQUIREMENT
        {
			name = CompleteContract
            type = CompleteContract
			contractType = Attraction
			minCount = 0
			cooldownDuration = 90d
	    }
	REQUIREMENT
		{
			name = Reputation
			type = Reputation
			minReputation = 350
		}
	}
	
}
