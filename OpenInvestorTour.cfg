// Contract for taking some investors on a tour.
//   Author: iLikeGothMommys

CONTRACT_TYPE
{
    name = openInvestorTour
    group = Hotels
	
	genericTitle = Ferry a group of investors to a space hotel
    genericDescription = Now that we have completed building a hotel, it is time to let investors see it.
	
    title = Ferry a group of investors to @/targetVessel
    genericTitle = Ferry investors to the new hotel!
	description = Now that we have built the hotel, the investors need to see it to make sure everything is up to their standards. If everything looks good then they will advertise it so tourists can book a shuttle to it.
    synopsis = Ferry a group of investors to @/targetVessel
    completedMessage = Great job, check with mission control to receive contracts to shuttle tourists to it.
	weight = 2.0
    // Level 3 prestige
    prestige = Exceptional

    // One at a time
    maxSimultaneous = 1
	
	// Quickly Expire

    // Contract rewards
	advanceFunds = 60000
	rewardFunds = ((60000) + Random(30000.0, 70000.0)) * @/rewardMultiplier
    rewardReputation = Random(6.0, 8.0)
	failureReputation = 10.0
	
	declinable = false
	cancellable = false
	autoAccept = true
	
	DATA
    {
        type = List<VesselIdentifier>

        requiredValue = false
		
        validHotels = $Attraction_Hotels.Where(vi => Vessel(vi).IsOrbiting())        
    }
	
	DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true // Hidden because the expression requirement conveys the same information

        // Get the proper target vessel
        targetVessel = @validHotels.Last()
    }
	
	DATA
	{
		type = CelestialBody
		title = Gives the planet for the modifier.
		hidden = true
		rewardBody = @targetVessel.CelestialBody()
		
	}
	
	DATA
	{
		type = double
		title = Gives the reward modifier.
		hidden = true
		rewardMultiplier = @rewardBody.Multiplier()
	}
	
	PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        vessel = @/targetVessel

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }	
	
	
	    BEHAVIOUR
		{
        name = SpawnPassengers
        type = SpawnPassengers

        count = 2
        removePassengers = true
		}
	
    BEHAVIOUR
    {
        name = CONTRACT_COMPLETED
        type = Expression

        PARAMETER_COMPLETED
        {
            parameter = RecoverKerbal

            Attraction_InvestorsReady = 0
        }
    }
	
    REQUIREMENT
    {
        name = All
        type = All

        hideChildren = false
        title = Must have gained attention from space tourism.
		
		REQUIREMENT
		{
        name = Expression
        type = Expression

        expression = Attraction_InvestorsReady == 1 

        title = Must have built a space hotel for your investors.
		
		}
		

    }
}

// RemoteTech changes the antenna module, so change it in our config too to
// support RemoteTech installs.
@CONTRACT_TYPE[FirstHotelConstruction]:FOR[Hotels]:NEEDS[RemoteTech]
{
    @PARAMETER[VesselParameterGroup]
    {
        @PARAMETER[AntennaPart]
        {
            @partModule = ModuleRTAntenna
        }
    }
}

// AntennaRange changes the antenna module, so change it in our config too to
// support AntennaRange installs.
@CONTRACT_TYPE[FirstHotelConstruction]:FOR[Hotels]:NEEDS[AntennaRange&!RemoteTech]
{
    @PARAMETER[VesselParameterGroup]
    {
        @PARAMETER[AntennaPart]
        {
            @partModule = ModuleLimitedDataTransmitter
        }
    }
}
