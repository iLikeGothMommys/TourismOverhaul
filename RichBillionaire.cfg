//   Author: iLikeGothMommys

CONTRACT_TYPE
{
    name = Tourism_RichBillionaire
    group = TourismOverhaul

    genericTitle = Assist a billionaire with achieving a world-first interplanetary mission.
    genericDescription = Assist a billionaire with achieving a world-first interplanetary mission.

    title = Bring @/randomName on the first manned landing on @targetBody.
    description = The rich billionaire @/randomName has contacted us. He wants his name to go down in history as the first Kerbal to land on the surface of @targetBody and return safely home. In order to make sure he gets credit for his achievment he wants to be alone in the craft when he lands. This could be a great oppurtunity for the agency.
    synopsis = Complete the first manned landing & return trip of @targetBody with @/randomName on board. Make sure they are the only crew member in the craft when they land on the surface of @targetBody.
    completedMessage = We've done it! @/randomName was the first Kerbal to set land on @targetBody and return safely. It looks like he was too afraid to step out on the surface though. 
	
	notes = Make sure @/randomName is the only Kerbal in the lander when it lands on @targetBody.

    // Level 1 prestige
    prestige = Exceptional

    targetBody = AllBodies().Where(b => !b.IsHomeWorld() && !b.IsSun() && !b.HaveLandedOn() && b.HasSurface() && b.Parent() != HomeWorld()).Random()

    // Can only have one at a time
    maxSimultaneous = 1

    // Contract rewards
	advanceFunds = 50000 + Random(0.0, 8500.0)
    rewardFunds = 300000.0 + Random(0.0, 85000.0)
    rewardReputation = 9.0
    failureReputation = 18.0
	
	// Quickly Expire
	minExpiry = 6.0
	maxExpiry = 25.0
	
	DATA 
	{
		type = List<string>
		title = List of billionaire names.
		
		billionaireNameList = [ "Elon Kerman", "Bezos Kerman", "Branson Kerman" ]
	}
	
		DATA 
	{
		type = string
		title = randomly generates name
		
		randomName = @/billionaireNameList.Random()
	}
	
	

	//THIS FAILS THE CONTRACT IF SOMEONE ELSE LANDS FIRST
	PARAMETER 
	{
		name = None
		type = None		
		disableOnStateChange = false 
		title = Make sure @/randomName is the only Kerbal that lands on the surface.
		hidden = true
						
		PARAMETER
		{
			name = All
			type = All
					
			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = LANDED
				targetBody = @/targetBody
			}
					
			PARAMETER
			{
				name = Any
				type = Any
							
				PARAMETER
				{
					name = HasCrew
					type = HasCrew
					trait = Pilot
				}
				PARAMETER
				{
					name = HasCrew
					type = HasCrew
					trait = Engineer
				}
				PARAMETER
				{
				name = HasCrew
				type = HasCrew
				trait = Scientist
				}
							
			}
						
		}
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		title = Bring @/randomName on the first manned landing on @targetBody. Make sure he is the only Kerbal in the lander.
		
		PARAMETER
		{
			name = HasPassengers
			type = HasPassengers
		}				
		
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			targetBody = @/targetBody
		}
			
	}
		
	PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

		kerbal = NewKerbal(Male, @/randomName)
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

    REQUIREMENT
    {
        name = All
        type = All														

        hideChildren = true
        title = Must have attracted a billionaire.

		REQUIREMENT
        {
			name = CompleteContract
            type = CompleteContract
			contractType = Tourism_RichBillionaire
			cooldownDuration = 12y
			minCount = 0
	    }
			
		REQUIREMENT
		{
			name = Reputation
			type = Reputation
			minReputation = 350
		}
		REQUIREMENT
        {
			name = ReturnFromOrbit
			type = ReturnFromOrbit
			checkType = MANNED
			
            targetBody = Sun()
        }
		
		REQUIREMENT
		{
			name = Landing
			type = Landing
			
			invertRequirement = true
			
			checkType = MANNED
			targetBody = @/targetBody
		}
	}
		
}

