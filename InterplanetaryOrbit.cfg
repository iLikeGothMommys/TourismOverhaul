//   Author: iLikeGothMommys
//	CONTRACT: FIRST CONTRACT
CONTRACT_TYPE
{
    name = Tourism_Interplanetary1Tourist
    group = interplanetary
    genericTitle = Ferry one tourist to another planet
    genericDescription = Ferry one tourist to another planet and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetBody
    description = @/interplanetaryMessagesNoLandingSingleTourst.Random()
    synopsis = Ferry one tourist to @targetBody and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
    targetBody = ReachedBodies().Where(b => !b.IsSun() && !b.IsHomeWorld() && b.Parent() != HomeWorld()).Random()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 22.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 7.0	
	deadline = Random(9372, 12780)
	
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
      
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
		}
	}
	
	DATA
	{
		type = List<string>
		title = list of potential interplanetary messages for contracts that do not require landing.
		interplanetaryMessagesNoLandingSingleTourst = [ "A space tourism enthusiast has expressed a keen interest in experiencing the awe-inspiring beauty of @/targetBody. We need you to ferry this tourist to @targetBody and safely return them to @/homeWorldPlanet.", "A private tourist has booked a once-in-a-lifetime opportunity to vist @/targetBody. They are seeking a reliable spaceflight provider to make this dream a reality. That is where we come in.", "A thrill-seeking tourist has requested a a trip to @targetBody. They are eager to witness its beauty from space and experience the unique environment of orbital flight.", "A tourist with a thirst for adventure has requested an unforgettable journey to visit @/targetBody. They want to experience the beauty of @/targetBody firsthand and return safely to @/homeWorldPlanet to share their story. It's a bold request, but that's where we come in.", "An adventurous tourist has decided that life on @/homeWorldPlanet just isn’t exciting enough and wants to take a scenic trip to vist @/targetBody. They’re hoping for breathtaking views, a few zero-gravity snacks, and a smooth ride back home to brag about it.", "A tourist has decided that looking up at @/targetBody from @/homeWorldPlanet just isn’t good enough—they want to see it up close! Their dream is to visit the planet, enjoy the cosmic sights, and then return home safely with tales of their adventure.", "A tourist reached out to us asking for a trip to visit @/targetBody and a safe return to @/homeWorldPlanet. This journey will provide a unique orbital experience and showcase the capabilities of your space program." ]
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(7d, 14d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Visit @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 1
			title = touristCount generator
			hidden = true
		}
}

//   Author: iLikeGothMommys
//	CONTRACT: SECOND CONTRACT
CONTRACT_TYPE
{
    name = Tourism_Interplanetary2Tourist
    group = interplanetary
    genericTitle = Ferry two tourists to another planet
    genericDescription = Ferry two tourists to another planet and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetBody
    description = @/interplanetaryMessagesNoLandingSingleTourst.Random()
    synopsis = Ferry two tourist to @targetBody and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!
	targetBody = ReachedBodies().Where(b => !b.IsSun() && !b.IsHomeWorld() && b.Parent() != HomeWorld()).Random()
    // Level 1 prestige
    prestige = Exceptional

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 22.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(9372, 12780)
	
	//Contract: FIRST TOURIST
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName1	
		}
	}
	//contract: SECOND tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName2
		}
		
	}
	
	DATA
	{
		type = List<string>
		title = list of potential interplanetary messages for contracts that do not require landing.
		interplanetaryMessagesNoLandingSingleTourst = [ "A group of adventurous tourists has requested a trip to visit @/targetBody and return safely to @/homeWorldPlanet. This mission will give them a taste of interplanetary travel and showcase your expertise in crewed space exploration.", "A group of tourists has signed up for the adventure of a lifetime: a round trip to @/targetBody and back to @/homeWorldPlanet. They’re counting on you to deliver a safe, smooth, and unforgettable journey.", "A group of eager tourists has booked a journey to @/targetBody, with the promise of an unforgettable adventure and a safe return to @/homeWorldPlanet. Our expertise is needed to make this interplanetary trip a success.", "A group of tourists has reached out for a guided journey to @/targetBody and a safe return to @/homeWorldPlanet. This mission will be a great showcase for the reliability of our space program.", "A group of tourists has arranged a journey to @/targetBody, looking forward to an unforgettable trip through space and a safe return to @/homeWorldPlanet. They’re counting on our agency to deliver the adventure of a lifetime.", "A group of tourists is ready for a journey to @/targetBody, seeking an unforgettable adventure among the stars before returning safely to @/homeWorldPlanet. It’s up to our agency to make their dream a reality." ]
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(7d, 14d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Fly By manned targetBody of @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 2
			title = touristCount generator
			hidden = true
		}
}

//   Author: iLikeGothMommys
//	CONTRACT: THIRD CONTRACT
CONTRACT_TYPE
{
    name = Tourism_Interplanetary3Tourist
    group = interplanetary
    genericTitle = Ferry three tourists to another planet
    genericDescription = Ferry three tourists to another planet and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetBody
    description = @/interplanetaryMessagesNoLandingSingleTourst.Random()
    synopsis = Ferry three tourist to @targetBody and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
    targetBody = ReachedBodies().Where(b => !b.IsSun() && !b.IsHomeWorld() && b.Parent() != HomeWorld()).Random()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 22.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(9372, 12780)
	
	//Contract: FIRST TOURIST
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName1	
		}
	}
	//contract: SECOND tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary

		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName2
		}
	}
	//CONTRACT: THIRD kerbal
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName3
		}
	}
	
	
	DATA
	{
		type = List<string>
		title = list of potential interplanetary messages for contracts that do not require landing.
		interplanetaryMessagesNoLandingSingleTourst = [ "A group of adventurous tourists has requested a trip to visit @/targetBody and return safely to @/homeWorldPlanet. This mission will give them a taste of interplanetary travel and showcase your expertise in crewed space exploration.", "A group of tourists has signed up for the adventure of a lifetime: a round trip to @/targetBody and back to @/homeWorldPlanet. They’re counting on you to deliver a safe, smooth, and unforgettable journey.", "A group of eager tourists has booked a journey to @/targetBody, with the promise of an unforgettable adventure and a safe return to @/homeWorldPlanet. Our expertise is needed to make this interplanetary trip a success.", "A group of tourists has reached out for a guided journey to @/targetBody and a safe return to @/homeWorldPlanet. This mission will be a great showcase for the reliability of our space program.", "A group of tourists has arranged a journey to @/targetBody, looking forward to an unforgettable trip through space and a safe return to @/homeWorldPlanet. They’re counting on our agency to deliver the adventure of a lifetime.", "A group of tourists is ready for a journey to @/targetBody, seeking an unforgettable adventure among the stars before returning safely to @/homeWorldPlanet. It’s up to our agency to make their dream a reality." ]
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName3 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(7d, 14d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }
	BEHAVIOUR
    {
        name = SpawnPassengers3
        type = SpawnPassengers
		kerbal = @/randomKerbalName3
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Fly By manned targetBody of @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 3
			title = touristCount generator
			hidden = true
		}
}

//   Author: iLikeGothMommys
//	CONTRACT: FOURTH CONTRACT
CONTRACT_TYPE
{
    name = Tourism_Interplanetary4Tourist
    group = interplanetary
    genericTitle = Ferry four tourists to another planet
    genericDescription = Ferry four tourists to another planet and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetBody
    description = @/interplanetaryMessagesNoLandingSingleTourst.Random()
    synopsis = Ferry four tourist to @targetBody and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
    targetBody = ReachedBodies().Where(b => !b.IsSun() && !b.IsHomeWorld() && b.Parent() != HomeWorld()).Random()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 22.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(9372, 12780)
	
	//Contract: FIRST TOURIST
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Orbit @/targetBody
			duration = Round(@/durationTime, 1d)
			
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName1	
		}
	}
	//contract: SECOND tourist
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName2's travel itinerary
		
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
      
			PARAMETER
			{
				name = HasPassengers2
				type = HasPassengers
				kerbal = @/randomKerbalName2
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName2
		}
	}
	//CONTRACT: THIRD kerbal
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName3's travel itinerary
		
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Orbit @/targetBody
			duration = Round(@/durationTime, 1d)
      
			PARAMETER
			{
				name = HasPassengers3
				type = HasPassengers
				kerbal = @/randomKerbalName3
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName3		
		}
	}
		
		//CONTRACT: Fourth Kerbal
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName4's travel itinerary
		
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			duration = Round(@/durationTime, 1d)
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers4
				type = HasPassengers
				kerbal = @/randomKerbalName4
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 1
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
		
			completeInSequence = true
			rewardFunds = 37000 + Random(4000.0, 6000.0)
			kerbal = @/randomKerbalName4
		}
	}
	
	
	DATA
	{
		type = List<string>
		title = list of potential interplanetary messages for contracts that do not require landing.
		interplanetaryMessagesNoLandingSingleTourst = [ "A group of adventurous tourists has requested a trip to visit @/targetBody and return safely to @/homeWorldPlanet. This mission will give them a taste of interplanetary travel and showcase your expertise in crewed space exploration.", "A group of tourists has signed up for the adventure of a lifetime: a round trip to @/targetBody and back to @/homeWorldPlanet. They’re counting on you to deliver a safe, smooth, and unforgettable journey.", "A group of eager tourists has booked a journey to @/targetBody, with the promise of an unforgettable adventure and a safe return to @/homeWorldPlanet. Our expertise is needed to make this interplanetary trip a success.", "A group of tourists has reached out for a guided journey to @/targetBody and a safe return to @/homeWorldPlanet. This mission will be a great showcase for the reliability of our space program.", "A group of tourists has arranged a journey to @/targetBody, looking forward to an unforgettable trip through space and a safe return to @/homeWorldPlanet. They’re counting on our agency to deliver the adventure of a lifetime.", "A group of tourists is ready for a journey to @/targetBody, seeking an unforgettable adventure among the stars before returning safely to @/homeWorldPlanet. It’s up to our agency to make their dream a reality." ]
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName3 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName4 = NewKerbal(Random(), @TourismOverhaul:kerbalNameList.Random())
	}
	DATA 
	{
		type = CelestialBody
		
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(7d, 14d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers
		kerbal = @/randomKerbalName2
    }
	BEHAVIOUR
    {
        name = SpawnPassengers3
        type = SpawnPassengers
		kerbal = @/randomKerbalName3
    }
	BEHAVIOUR
    {
        name = SpawnPassengers3
        type = SpawnPassengers
		kerbal = @/randomKerbalName4
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
        }
		REQUIREMENT 
		{
			name = FlyBy
			type = FlyBy
			checkType = MANNED
			title = Fly By manned targetBody of @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 4
			title = touristCount generator
			hidden = true
		}
}
